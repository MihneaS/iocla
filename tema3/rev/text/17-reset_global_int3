   
 80488ea:	55                   	push   ebp
 80488eb:	89 e5                	mov    ebp,esp
 80488ed:	83 ec 08             	sub    esp,0x8
 80488f0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 80488f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 80488f6:	01 d0                	add    eax,edx
 80488f8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
 80488fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 80488fe:	2b 45 0c             	sub    eax,DWORD PTR [ebp+0xc]
 8048901:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
 8048904:	81 7d fc ef be ad de 	cmp    DWORD PTR [ebp-0x4],0xdeadbeef
 804890b:	75 2b                	jne    8048938 <__isoc99_scanf@plt+0x458>
 804890d:	81 7d f8 37 13 37 13 	cmp    DWORD PTR [ebp-0x8],0x13371337
 8048914:	75 22                	jne    8048938 <__isoc99_scanf@plt+0x458>
 8048916:	c7 05 9c a2 04 08 00 	mov    DWORD PTR ds:0x804a29c,0x0
 804891d:	00 00 00 
 8048920:	a1 28 a4 04 08       	mov    eax,ds:0x804a428 ; heap address
 8048925:	8d 48 10             	lea    ecx,[eax+0x10]
 8048928:	a1 b4 a2 04 08       	mov    eax,ds:0x804a2b4
 804892d:	8b 15 b8 a2 04 08    	mov    edx,DWORD PTR ds:0x804a2b8
 8048933:	89 01                	mov    DWORD PTR [ecx],eax
 8048935:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
 8048938:	c9                   	leave  
 8048939:	c3                   	ret  

low-level:
salvează vechiului ebp pe stivă
se actualizează valoarea la vârful curent al stivei.
se rezerva pe stiva int n1, n2;
edx = arg1
eax = arg2
eax += edx
n1 = eax
eax = arg1
eax -= arg2
n2 = eax
if n1 == 0xdeadbeef
		&& n2 == 0x13371337 
	face global_int3 0
	pregateste octetii de la pozitiil heap_address[16] si heap_address[20]

cum as numi-o
 void reset_global_int3()
